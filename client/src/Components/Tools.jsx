import axios from "axios";
import { useState } from "react";
import useAuth from "../hooks/useAuth";
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./fileUpload.css";
import { Link } from "react-router-dom";
import "./tools.css";

export default function Tools({ onRouteChange, studyGuide, onTotalChange }) {
  const { fetchMe, updateCredits, selectedUser, setUser } = useAuth();
  const [selectedFile, setSelectedFile] = useState(null);
  const [text, setText] = useState("");
  const [response, setResponse] = useState("");
  const [error, setError] = useState("");
  const [toolSelected, setToolSelected] = useState("");
  const [isChecked, setIsChecked] = useState(false);
  const [isChecked2, setIsChecked2] = useState(false);
  let totalPrice = 0;
  const navigate = useNavigate();

  console.log("study guide in tools", studyGuide);

  useEffect(() => {
    setText(studyGuide);
    console.log("use eff text tools", text);
  }, [studyGuide]);

  useEffect(() => {
    if (selectedUser) {
      console.log("Selected user updated:", selectedUser);
    }
  }, [selectedUser]);

  function handleChange() {
    if (!isChecked) {
      totalPrice += 1;
    } else if (isChecked) {
      totalPrice -= 1;
    }
    setIsChecked(!isChecked);
  }

  function handleChange2() {
    if (!isChecked2) {
      totalPrice += 2;
    } else if (isChecked2) {
      totalPrice -= 2;
    }
    setIsChecked2(!isChecked2);
  }

  return (
    <div className="big">
      <div className="tools">
        <div className="links">
          {/* <Link to="/fileupload" className="text10">
            Upload
          </Link>
          <Link to="/tools" className="text">
            Tools
          </Link> */}
          <div className="not-selected">Upload</div>
          <div className="selected1">Tools</div>
        </div>

        <div className="row1">
          {" "}
          <svg
            className="first"
            width="30"
            height="22"
            viewBox="0 0 30 22"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M22 6.19625V5.5C22 2.365 17.2712 0 11 0C4.72875 0 0 2.365 0 5.5V10.5C0 13.1112 3.28125 15.1863 8 15.8075V16.5C8 19.635 12.7288 22 19 22C25.2712 22 30 19.635 30 16.5V11.5C30 8.9125 26.8225 6.835 22 6.19625ZM28 11.5C28 13.1525 24.1512 15 19 15C18.5338 15 18.0712 14.9838 17.615 14.9538C20.3112 13.9713 22 12.375 22 10.5V8.2175C25.7337 8.77375 28 10.2838 28 11.5ZM8 13.7812V10.8075C8.99472 10.9371 9.99687 11.0014 11 11C12.0031 11.0014 13.0053 10.9371 14 10.8075V13.7812C13.0068 13.928 12.004 14.0011 11 14C9.99598 14.0011 8.99324 13.928 8 13.7812ZM20 8.74125V10.5C20 11.5487 18.4487 12.675 16 13.3587V10.4375C17.6138 10.0463 18.98 9.46375 20 8.74125ZM11 2C16.1512 2 20 3.8475 20 5.5C20 7.1525 16.1512 9 11 9C5.84875 9 2 7.1525 2 5.5C2 3.8475 5.84875 2 11 2ZM2 10.5V8.74125C3.02 9.46375 4.38625 10.0463 6 10.4375V13.3587C3.55125 12.675 2 11.5487 2 10.5ZM10 16.5V15.9788C10.3287 15.9913 10.6613 16 11 16C11.485 16 11.9587 15.9837 12.4237 15.9562C12.9403 16.1412 13.4665 16.2981 14 16.4263V19.3587C11.5513 18.675 10 17.5487 10 16.5ZM16 19.7812V16.8C16.9944 16.9337 17.9967 17.0005 19 17C20.0031 17.0014 21.0053 16.9371 22 16.8075V19.7812C20.0106 20.0729 17.9894 20.0729 16 19.7812ZM24 19.3587V16.4375C25.6138 16.0462 26.98 15.4637 28 14.7412V16.5C28 17.5487 26.4487 18.675 24 19.3587Z"
              fill="#7855FF"
            />
          </svg>
          <div className="text">Credit Balance: {selectedUser.credits}</div>
        </div>

        <div className="row">
          {" "}
          <svg
            className="first"
            width="26"
            height="22"
            viewBox="0 0 26 22"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M20 4H2C1.46957 4 0.960859 4.21071 0.585786 4.58579C0.210714 4.96086 0 5.46957 0 6V20C0 20.5304 0.210714 21.0391 0.585786 21.4142C0.960859 21.7893 1.46957 22 2 22H20C20.5304 22 21.0391 21.7893 21.4142 21.4142C21.7893 21.0391 22 20.5304 22 20V6C22 5.46957 21.7893 4.96086 21.4142 4.58579C21.0391 4.21071 20.5304 4 20 4ZM20 20H2V6H20V20ZM26 2V17C26 17.2652 25.8946 17.5196 25.7071 17.7071C25.5196 17.8946 25.2652 18 25 18C24.7348 18 24.4804 17.8946 24.2929 17.7071C24.1054 17.5196 24 17.2652 24 17V2H5C4.73478 2 4.48043 1.89464 4.29289 1.70711C4.10536 1.51957 4 1.26522 4 1C4 0.734784 4.10536 0.48043 4.29289 0.292893C4.48043 0.105357 4.73478 0 5 0H24C24.5304 0 25.0391 0.210714 25.4142 0.585786C25.7893 0.960859 26 1.46957 26 2Z"
              fill="#7855FF"
            />
          </svg>
          <div className="textF">Flashcards</div>
          <svg
            width="30"
            height="23"
            viewBox="0 0 30 23"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M22 6.30367V5.60742C22 2.47242 17.2712 0.107422 11 0.107422C4.72875 0.107422 0 2.47242 0 5.60742V10.6074C0 13.2187 3.28125 15.2937 8 15.9149V16.6074C8 19.7424 12.7288 22.1074 19 22.1074C25.2712 22.1074 30 19.7424 30 16.6074V11.6074C30 9.01992 26.8225 6.94242 22 6.30367ZM28 11.6074C28 13.2599 24.1512 15.1074 19 15.1074C18.5338 15.1074 18.0712 15.0912 17.615 15.0612C20.3112 14.0787 22 12.4824 22 10.6074V8.32492C25.7337 8.88117 28 10.3912 28 11.6074ZM8 13.8887V10.9149C8.99472 11.0445 9.99687 11.1088 11 11.1074C12.0031 11.1088 13.0053 11.0445 14 10.9149V13.8887C13.0068 14.0354 12.004 14.1085 11 14.1074C9.99598 14.1085 8.99324 14.0354 8 13.8887ZM20 8.84867V10.6074C20 11.6562 18.4487 12.7824 16 13.4662V10.5449C17.6138 10.1537 18.98 9.57117 20 8.84867ZM11 2.10742C16.1512 2.10742 20 3.95492 20 5.60742C20 7.25992 16.1512 9.10742 11 9.10742C5.84875 9.10742 2 7.25992 2 5.60742C2 3.95492 5.84875 2.10742 11 2.10742ZM2 10.6074V8.84867C3.02 9.57117 4.38625 10.1537 6 10.5449V13.4662C3.55125 12.7824 2 11.6562 2 10.6074ZM10 16.6074V16.0862C10.3287 16.0987 10.6613 16.1074 11 16.1074C11.485 16.1074 11.9587 16.0912 12.4237 16.0637C12.9403 16.2486 13.4665 16.4055 14 16.5337V19.4662C11.5513 18.7824 10 17.6562 10 16.6074ZM16 19.8887V16.9074C16.9944 17.0411 17.9967 17.1079 19 17.1074C20.0031 17.1088 21.0053 17.0445 22 16.9149V19.8887C20.0106 20.1803 17.9894 20.1803 16 19.8887ZM24 19.4662V16.5449C25.6138 16.1537 26.98 15.5712 28 14.8487V16.6074C28 17.6562 26.4487 18.7824 24 19.4662Z"
              fill="#777777"
            />
          </svg>
          <div className="line">|</div>
          <div className="numb">1</div>
          <input
            type="checkbox"
            className="box"
            checked={isChecked}
            onChange={handleChange}
          />
        </div>

        {/* <button
        className="button"
        onClick={async () => {
          if (!text) {
            setError("No file uploaded");
          } else if (selectedUser.credits > 1) {
            const newTotalCredits = selectedUser.credits - 1;
            const newCredits = await updateCredits({
              credits: newTotalCredits,
            });
            setUser({ ...selectedUser, credits: newCredits });
            onRouteChange("flashcard");
            setTimeout(() => {
              navigate("/loading");
            }, 0);
          } else {
            setTimeout(() => {
              navigate("/purchase");
            }, 0);
          }
        }}
      >
        Generate Flashcards *logo* 1
      </button> */}
        <div className="row">
          <svg
            className="first"
            width="24"
            height="29"
            viewBox="0 0 24 29"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M13.9998 20.9995C15.9776 20.9995 17.911 20.413 19.5555 19.3142C21.2 18.2154 22.4817 16.6536 23.2386 14.8263C23.9955 12.9991 24.1935 10.9884 23.8077 9.0486C23.4218 7.10879 22.4694 5.32696 21.0709 3.92844C19.6723 2.52991 17.8905 1.57751 15.9507 1.19165C14.0109 0.805802 12.0002 1.00384 10.173 1.76071C8.3457 2.51759 6.78392 3.79931 5.6851 5.4438C4.58629 7.0883 3.9998 9.02169 3.9998 10.9995C4.00278 13.6508 5.0573 16.1926 6.93202 18.0673C8.80674 19.942 11.3485 20.9965 13.9998 20.9995ZM13.9998 2.99951C15.5821 2.99951 17.1288 3.4687 18.4444 4.34775C19.76 5.2268 20.7853 6.47623 21.3908 7.93804C21.9963 9.39985 22.1548 11.0084 21.8461 12.5602C21.5374 14.1121 20.7755 15.5375 19.6567 16.6564C18.5378 17.7752 17.1124 18.5371 15.5605 18.8458C14.0087 19.1545 12.4001 18.996 10.9383 18.3905C9.47652 17.785 8.22709 16.7597 7.34804 15.4441C6.46899 14.1285 5.9998 12.5818 5.9998 10.9995C6.00212 8.87849 6.84571 6.845 8.3455 5.34521C9.84529 3.84542 11.8788 3.00182 13.9998 2.99951ZM23.7211 19.687C23.8122 19.7818 23.8837 19.8935 23.9316 20.016C23.9795 20.1384 24.0027 20.269 24 20.4005C23.9974 20.5319 23.9688 20.6615 23.916 20.7819C23.8632 20.9023 23.7872 21.011 23.6923 21.102C21.3391 23.3716 18.2613 24.7392 14.9998 24.9645V26.9995H17.9998C18.265 26.9995 18.5194 27.1049 18.7069 27.2924C18.8944 27.4799 18.9998 27.7343 18.9998 27.9995C18.9998 28.2647 18.8944 28.5191 18.7069 28.7066C18.5194 28.8942 18.265 28.9995 17.9998 28.9995H9.9998C9.73458 28.9995 9.48023 28.8942 9.29269 28.7066C9.10516 28.5191 8.9998 28.2647 8.9998 27.9995C8.9998 27.7343 9.10516 27.4799 9.29269 27.2924C9.48023 27.1049 9.73458 26.9995 9.9998 26.9995H12.9998V24.9633C10.3476 24.7733 7.80426 23.8319 5.66747 22.2493C3.53069 20.6667 1.8888 18.5083 0.933895 16.0266C-0.0210049 13.545 -0.249419 10.8427 0.275378 8.23595C0.800175 5.62921 2.05648 3.22583 3.8973 1.30701C3.98766 1.20992 4.09643 1.13177 4.21728 1.07712C4.33812 1.02247 4.46864 0.992405 4.60122 0.988676C4.7338 0.984948 4.86579 1.00763 4.98952 1.0554C5.11325 1.10318 5.22624 1.17509 5.32191 1.26694C5.41758 1.3588 5.49403 1.46877 5.54679 1.59046C5.59955 1.71214 5.62758 1.84311 5.62925 1.97573C5.63091 2.10835 5.60618 2.23998 5.55649 2.36295C5.50679 2.48592 5.43314 2.59778 5.3398 2.69201C3.15991 4.95635 1.95543 7.98557 1.98529 11.1285C2.01515 14.2715 3.27695 17.2773 5.49947 19.4998C7.72199 21.7224 10.7278 22.9842 13.8708 23.014C17.0137 23.0439 20.043 21.8394 22.3073 19.6595C22.4984 19.4757 22.7548 19.3754 23.0199 19.3805C23.285 19.3857 23.5372 19.4959 23.7211 19.687Z"
              fill="#7855FF"
            />
          </svg>

          <div className="textP">Prediction </div>
          <svg
            width="30"
            height="23"
            viewBox="0 0 30 23"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M22 6.30367V5.60742C22 2.47242 17.2712 0.107422 11 0.107422C4.72875 0.107422 0 2.47242 0 5.60742V10.6074C0 13.2187 3.28125 15.2937 8 15.9149V16.6074C8 19.7424 12.7288 22.1074 19 22.1074C25.2712 22.1074 30 19.7424 30 16.6074V11.6074C30 9.01992 26.8225 6.94242 22 6.30367ZM28 11.6074C28 13.2599 24.1512 15.1074 19 15.1074C18.5338 15.1074 18.0712 15.0912 17.615 15.0612C20.3112 14.0787 22 12.4824 22 10.6074V8.32492C25.7337 8.88117 28 10.3912 28 11.6074ZM8 13.8887V10.9149C8.99472 11.0445 9.99687 11.1088 11 11.1074C12.0031 11.1088 13.0053 11.0445 14 10.9149V13.8887C13.0068 14.0354 12.004 14.1085 11 14.1074C9.99598 14.1085 8.99324 14.0354 8 13.8887ZM20 8.84867V10.6074C20 11.6562 18.4487 12.7824 16 13.4662V10.5449C17.6138 10.1537 18.98 9.57117 20 8.84867ZM11 2.10742C16.1512 2.10742 20 3.95492 20 5.60742C20 7.25992 16.1512 9.10742 11 9.10742C5.84875 9.10742 2 7.25992 2 5.60742C2 3.95492 5.84875 2.10742 11 2.10742ZM2 10.6074V8.84867C3.02 9.57117 4.38625 10.1537 6 10.5449V13.4662C3.55125 12.7824 2 11.6562 2 10.6074ZM10 16.6074V16.0862C10.3287 16.0987 10.6613 16.1074 11 16.1074C11.485 16.1074 11.9587 16.0912 12.4237 16.0637C12.9403 16.2486 13.4665 16.4055 14 16.5337V19.4662C11.5513 18.7824 10 17.6562 10 16.6074ZM16 19.8887V16.9074C16.9944 17.0411 17.9967 17.1079 19 17.1074C20.0031 17.1088 21.0053 17.0445 22 16.9149V19.8887C20.0106 20.1803 17.9894 20.1803 16 19.8887ZM24 19.4662V16.5449C25.6138 16.1537 26.98 15.5712 28 14.8487V16.6074C28 17.6562 26.4487 18.7824 24 19.4662Z"
              fill="#777777"
            />
          </svg>
          <div className="line">|</div>
          <div className="numb1">2</div>
          <input
            className="box"
            type="checkbox"
            checked={isChecked2}
            onChange={handleChange2}
          />
        </div>

        {(isChecked == true || isChecked2 == true) &&
        selectedUser.credits > totalPrice ? (
          <button
            className="button"
            onClick={async () => {
              const newTotalCredits = selectedUser.credits - totalPrice;
              const newCredits = await updateCredits({
                credits: newTotalCredits,
              });
              setUser({ ...selectedUser, credits: newCredits });
              if (isChecked == true && isChecked2 == true) {
                onRouteChange("both");
              } else if (isChecked == false && isChecked2 == true) {
                onRouteChange("prediction");
              } else {
                onRouteChange("flashcard");
              }

              setTimeout(() => {
                navigate("/loading");
              }, 0);
            }}
          >
            Start Cramming
          </button>
        ) : (
          <button className="button" onClick={() => navigate("/purchase")}>
            Purchase Credits
          </button>
        )}
      </div>
    </div>
  );
}
