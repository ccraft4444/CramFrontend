import { action, thunk } from "easy-peasy";
import axios from "axios";

// make sure all routes changed to env url

export const auth = {
  selectedUser: { username: "Guest" },
  setUser: action((state, payload) => {
    state.selectedUser = payload;
  }),
  loginUser: thunk(async (actions, payload) => {
    console.log("payload in login", payload);
    const { data } = await axios.post(
      `${process.env.DB_URL}/routes/users/login`,
      payload
    );
    console.log("data after line 11", data);
    actions.setUser(data);
  }),

  createUser: thunk(async (actions, payload) => {
    console.log("payload", payload);
    const { data } = await axios.post(
      `${process.env.DB_URL}/routes/users/register`,
      payload
    );
    console.log("data in reg", data);
    actions.setUser(data);
  }),

  logoutUser: thunk(async (actions, payload) => {
    const { data } = await axios.post(
      `${process.env.DB_URL}/routes/users/logout`,
      payload
    );
    actions.setUser({ username: "Guest" });
  }),
  fetchMe: thunk(async (actions, payload) => {
    const { data } = await axios.get(
      `${process.env.DB_URL}/routes/users/me`,
      payload
    );
    actions.setUser(data);
  }),
  updateCredits: thunk(async (actions, payload) => {
    await axios.patch(`${process.env.DB_URL}/routes/users/me/credits`, {
      credits: payload.credits,
    });
    const { data } = await axios.get(`${env("DB")}/routes/users/me`, payload);
    actions.setUser(data);
    return payload.credits; // return the new credit value
  }),
  updateUser: thunk(async (actions, payload) => {
    await axios.patch(`${process.env.DB_URL}/routes/users/me`, {
      email: payload.email,
      password: payload.password,
    });
  }),
};
